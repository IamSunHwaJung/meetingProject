/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-03-12 18:48:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\"/>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("@media(min-width:320px)and(max-width:767px)\r\n");
      out.write("{\r\n");
      out.write("body{background:#F96;}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("@media(min-width:768px)and(max-width:1024px)\r\n");
      out.write("{\r\n");
      out.write("\tbody{background:#C39;}\r\n");
      out.write("}\r\n");
      out.write("@media(min-width:1025px)\r\n");
      out.write("{\r\n");
      out.write("\tbody{backgroun:#663;}\r\n");
      out.write("}\r\n");
      out.write(" html { height : 100% }\r\n");
      out.write("\r\n");
      out.write(" body { height : 100%; margin: 3% 0% 0% 1.5%; padding: 0 }\r\n");
      out.write("\r\n");
      out.write(" #map_canvas { height : 100% }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type = \"text/javascript\"\r\n");
      out.write("\r\n");
      out.write(" src = \"http://maps.googleapis.com/maps/api/js?sensor=true\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type = \"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var map;\r\n");
      out.write("\r\n");
      out.write("var infowindow;\r\n");
      out.write("\r\n");
      out.write("var marker;\r\n");
      out.write("\r\n");
      out.write("//여러 함수에서 같은 변수를 사용할 때에는 함수 밖에 변수를 지정해 놓으면 에러가 안 납니다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" function initialize(){\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  var latlng = new google.maps.LatLng(37.5240220, 126.9265940);\r\n");
      out.write("\r\n");
      out.write("  var myOptions = {\r\n");
      out.write("\r\n");
      out.write("   zoom: 15,\r\n");
      out.write("\r\n");
      out.write("   center:latlng,\r\n");
      out.write("\r\n");
      out.write("   mapTypeId: google.maps.MapTypeId.ROADMAP   \r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("  map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("  google.maps.event.addListener(map, 'click', Setmarker);\r\n");
      out.write("\r\n");
      out.write("  /*지도에 특정 지점에 click event(즉, 특정지점을 클릭함)이 일어나면,\r\n");
      out.write("\r\n");
      out.write("                  아래의 Setmarker라는 함수가 실행되게 함*/\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("  infowindow = new google.maps.InfoWindow();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" };\r\n");
      out.write("\r\n");
      out.write("        //클릭한 지점에 마커를 표시하는 함수입니다.\r\n");
      out.write("\r\n");
      out.write(" function Setmarker(event) {\r\n");
      out.write("\r\n");
      out.write("         marker = new google.maps.Marker({\r\n");
      out.write("\r\n");
      out.write("    position: event.latLng,\r\n");
      out.write("\r\n");
      out.write("    map: map\r\n");
      out.write("\r\n");
      out.write("   } );\r\n");
      out.write("\r\n");
      out.write("      /*marker를 만드는 부분입니다. \r\n");
      out.write("\r\n");
      out.write("         position 변수는 marker의 위치로 위도/경도 좌표를 변수로 사용합니다. \r\n");
      out.write("\r\n");
      out.write("         여기서는 click event 때 event 클래스의 저장된 클릭 위치 좌표를 position 변수에 넣었\r\n");
      out.write("\r\n");
      out.write("         습니다.\r\n");
      out.write("\r\n");
      out.write("         map은 마커를 표시할 지도로 당연히 위의 map을 지정합니다. */\r\n");
      out.write("\r\n");
      out.write("   infowindow.setContent(\"여기에 마커가 표시됩니다.\");\r\n");
      out.write("\r\n");
      out.write("   infowindow.open(map,marker);\r\n");
      out.write("\r\n");
      out.write("                /*infowindow를 marker와 연동시킵니다. open() 함수를 쓸 때 열릴 지도 변수 뒤에        \r\n");
      out.write("\r\n");
      out.write("                marker 등의 모든 MVC object와 연동을 시키면 marker의 위치에 infowindow도 같이 나타\r\n");
      out.write("\r\n");
      out.write("                나게 됩니다.*/\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body onload=\"initialize()\">\r\n");
      out.write("<h1>회사 위치</h1>\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write(" <div id=\"map_canvas\" style=\"width:80%; height:60%\"></div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
